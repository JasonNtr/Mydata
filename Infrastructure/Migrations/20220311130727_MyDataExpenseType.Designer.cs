// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220311130727_MyDataExpenseType")]
    partial class MyDataExpenseType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Model.MyDataAddressType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataPartyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyDataPartyTypeId")
                        .IsUnique();

                    b.ToTable("MyDataAddressType");
                });

            modelBuilder.Entity("Domain.Model.MyDataCancelInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long?>("Uid")
                        .HasColumnType("bigint");

                    b.Property<long?>("invoiceMark")
                        .HasColumnType("bigint");

                    b.Property<bool>("invoiceProcessed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MyDataCancelInvoices");
                });

            modelBuilder.Entity("Domain.Model.MyDataCancelationError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataCancelationResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MyDataCancelationResponseId");

                    b.ToTable("MyDataCancellationErrors");
                });

            modelBuilder.Entity("Domain.Model.MyDataCancelationResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("cancellationMark")
                        .HasColumnType("bigint");

                    b.Property<string>("statusCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyDataInvoiceId");

                    b.ToTable("MyDataCancellationResponses");
                });

            modelBuilder.Entity("Domain.Model.MyDataCancelledInvoicesDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("cancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("cancellationMark")
                        .HasColumnType("bigint");

                    b.Property<long?>("invoiceMark")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MyDataCancelledInvoicesDocs");
                });

            modelBuilder.Entity("Domain.Model.MyDataError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MyDataResponseId");

                    b.ToTable("MyDataErrors");
                });

            modelBuilder.Entity("Domain.Model.MyDataExpenseType", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sign")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Code");

                    b.ToTable("MyDataExpenseTypes");

                    b.HasData(
                        new
                        {
                            Code = 270,
                            Description = "12 παρ. 5",
                            ShortTitle = "ΤΙΜ.ΑΓΟΡ",
                            Title = "ΤΙΜΟΛΟΓΙΟ ΑΓΟΡΑΣ",
                            sign = "-"
                        },
                        new
                        {
                            Code = 272,
                            Description = "12 παρ. 5, 11 παρ. 1",
                            ShortTitle = "ΤΙΜ.ΑΓ.−Δ.Α.",
                            Title = "ΤΙΜΟΛΟΓΙΟ ΑΓΟΡΑΣ − ΔΕΛΤΙΟ ΑΠΟΣΤΟΛΗΣ",
                            sign = "-"
                        },
                        new
                        {
                            Code = 279,
                            Description = "ΠΟΛ 1151/06−06−2001 (ελαιοτριβεία)",
                            ShortTitle = "Α.Π.Υ−Δ.Π.Π−Δ.Α",
                            Title = "ΑΠΟΔ. ΠΑΡΟΧΗΣ ΥΠΗΡΕΣΙΩΝ − ΔΕΛ. ΠΟΣΟΤ. ΠAΡΑΛΑΒΗΣ − ΔΕΛ. ΑΠΟΣΤΟΛΗΣ",
                            sign = "+"
                        },
                        new
                        {
                            Code = 295,
                            ShortTitle = "ΔΠΠ−ΤΙΜ ΑΓΟΡ",
                            Title = "ΔΕΛΤΙΟ ΠΟΣΟΤΙΚΗΣ ΠΑΡΑΛΑΒΗΣ − ΤΙΜΟΛΟΓΙΟ ΑΓΟΡΑΣ",
                            sign = "-"
                        },
                        new
                        {
                            Code = 329,
                            ShortTitle = "ΤΠ−Τ(ΑΓ.ΑΓΡ)−ΔΑ",
                            Title = "ΤΙΜΟΛΟΓΙΟ (Παροχ. Υπηρ.) − ΤΙΜ. (Αγοράς Αγρ. Προϊόντων) − ΔΕΛ. ΑΠΟΣΤ",
                            sign = "+"
                        });
                });

            modelBuilder.Entity("Domain.Model.MyDataExpensesClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MyDataDocInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("amount")
                        .HasColumnType("float");

                    b.Property<string>("classificationCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("classificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("optionalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocInvoiceId");

                    b.ToTable("MyDataExpensesClassifications");
                });

            modelBuilder.Entity("Domain.Model.MyDataIncome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CancellationMark")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IncomeDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IncomeNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("IncomeTypeCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoredXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Uid")
                        .HasColumnType("bigint");

                    b.Property<string>("VAT")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MyDataIncomes");
                });

            modelBuilder.Entity("Domain.Model.MyDataIncomeClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MyDataInvoiceDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("amount")
                        .HasColumnType("float");

                    b.Property<string>("classificationCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("classificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("optionalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyDataInvoiceDetailsId")
                        .IsUnique()
                        .HasFilter("[MyDataInvoiceDetailsId] IS NOT NULL");

                    b.ToTable("MyDataIncomeClassifications");
                });

            modelBuilder.Entity("Domain.Model.MyDataIncomeError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataIncomeResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MyDataIncomeResponseId");

                    b.ToTable("MyDataIncomeErrors");
                });

            modelBuilder.Entity("Domain.Model.MyDataIncomeResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IncomeMark")
                        .HasColumnType("bigint");

                    b.Property<string>("IncomeUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataIncomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyDataIncomeId");

                    b.ToTable("MyDataIncomeResponses");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CancellationMark")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InvoiceNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("InvoiceTypeCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoredXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Uid")
                        .HasColumnType("bigint");

                    b.Property<string>("VAT")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceTypeCode");

                    b.ToTable("MyDataInvoices");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataDocInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("lineNumber")
                        .HasColumnType("int");

                    b.Property<double>("netValue")
                        .HasColumnType("float");

                    b.Property<double>("vatAmount")
                        .HasColumnType("float");

                    b.Property<string>("vatCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocInvoiceId");

                    b.ToTable("MyDataInvoiceDetails");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceExpensesClassificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<long?>("classificationMark")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("expensesClassificationDetailDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("invoiceMark")
                        .HasColumnType("bigint");

                    b.Property<int?>("lineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("transactionMode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("expensesClassificationDetailDataId");

                    b.ToTable("MyDataInvoiceExpensesClassificationTypes");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceHeaderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataDocInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("aa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("correlatedInvoices")
                        .HasColumnType("bigint");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("dispatchTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("exchangeRate")
                        .HasColumnType("float");

                    b.Property<string>("invoiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("movePurpose")
                        .HasColumnType("int");

                    b.Property<bool?>("selfPricing")
                        .HasColumnType("bit");

                    b.Property<string>("series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("vatPaymentSuspension")
                        .HasColumnType("bit");

                    b.Property<string>("vehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocInvoiceId")
                        .IsUnique();

                    b.ToTable("MyDataInvoiceHeaderTypes");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceRowType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MyDataDocInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("deductionsAmount")
                        .HasColumnType("float");

                    b.Property<bool?>("discountOption")
                        .HasColumnType("bit");

                    b.Property<double?>("feesAmount")
                        .HasColumnType("float");

                    b.Property<int?>("feesPercentCategory")
                        .HasColumnType("int");

                    b.Property<int?>("invoiceDetailType")
                        .HasColumnType("int");

                    b.Property<string>("lineComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("measurementUnit")
                        .HasColumnType("int");

                    b.Property<double>("netValue")
                        .HasColumnType("float");

                    b.Property<double?>("otherTaxesAmount")
                        .HasColumnType("float");

                    b.Property<int?>("otherTaxesPercentCategory")
                        .HasColumnType("int");

                    b.Property<double?>("quantity")
                        .HasColumnType("float");

                    b.Property<double?>("stampDutyAmount")
                        .HasColumnType("float");

                    b.Property<int?>("stampDutyPercentCategory")
                        .HasColumnType("int");

                    b.Property<double>("vatAmount")
                        .HasColumnType("float");

                    b.Property<string>("vatCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("vatExemptionCategory")
                        .HasColumnType("int");

                    b.Property<double?>("withheldAmount")
                        .HasColumnType("float");

                    b.Property<int?>("withheldPercentCategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocInvoiceId");

                    b.ToTable("MyDataInvoiceRowType");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataDocInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("totalDeductionsAmount")
                        .HasColumnType("float");

                    b.Property<double>("totalFeesAmount")
                        .HasColumnType("float");

                    b.Property<double>("totalGrossValue")
                        .HasColumnType("float");

                    b.Property<double>("totalNetValue")
                        .HasColumnType("float");

                    b.Property<double>("totalOtherTaxesAmount")
                        .HasColumnType("float");

                    b.Property<double>("totalStumpDutyAmount")
                        .HasColumnType("float");

                    b.Property<double>("totalVatAmount")
                        .HasColumnType("float");

                    b.Property<double>("totalWithheldAmounr")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocInvoiceId")
                        .IsUnique();

                    b.ToTable("MyDataInvoiceSummary");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceType", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sign")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Code");

                    b.ToTable("MyDataInvoiceTypes");

                    b.HasData(
                        new
                        {
                            Code = 40,
                            Description = "10 παρ. 1 Π.Δ. 186/92 και 2 παρ. 11 Ν. 3052/2002 από 1−1−2003",
                            ShortTitle = "ΔΕΛΤ.ΠΟΣ.ΠΑΡ.",
                            Title = "ΔΕΛΤΙΟ ΠΟΣΟΤΙΚΗΣ ΠΑΡΑΛΑΒΗΣ",
                            sign = "0"
                        },
                        new
                        {
                            Code = 54,
                            Description = "ΠΟΛ. 176/77",
                            ShortTitle = "ΑΠΟΔ.ΑΣΦ.",
                            Title = "ΑΠΟΔΕΙΞΗ ΑΣΦΑΛΙΣΤΡΩΝ",
                            sign = "+"
                        },
                        new
                        {
                            Code = 158,
                            Description = "11 παρ. 1",
                            ShortTitle = "Δ.Α ",
                            Title = "ΔΕΛΤΙΟ ΑΠΟΣΤΟΛΗΣ",
                            sign = "0"
                        },
                        new
                        {
                            Code = 162,
                            Description = "12 παρ. 1, 2",
                            ShortTitle = "Τ.Π.Υ",
                            Title = "ΤΙΜΟΛΟΓΙΟ (Παροχή Υπηρεσιών)",
                            sign = "+"
                        },
                        new
                        {
                            Code = 165,
                            Description = "2 μικτή χρήση",
                            ShortTitle = "ΤΙΜ.",
                            Title = "ΤΙΜΟΛΟΓΙΟ",
                            sign = "+"
                        },
                        new
                        {
                            Code = 169,
                            Description = "12 παρ. 13",
                            ShortTitle = "Π.Τ",
                            Title = "ΠΙΣΤΩΤΙΚΟ ΤΙΜΟΛΟΓΙΟ",
                            sign = "-"
                        },
                        new
                        {
                            Code = 173,
                            Description = "13 παρ. 1−3",
                            ShortTitle = "Α.Λ.Π",
                            Title = "ΑΠΟΔΕΙΞΗ ΛΙΑΝΙΚΗΣ ΠΩΛΗΣΗΣ",
                            sign = "+"
                        },
                        new
                        {
                            Code = 174,
                            Description = "13 παρ. 1−3 ",
                            ShortTitle = "Α.Π.Υ",
                            Title = "ΑΠΟΔΕΙΞΗ ΠΑΡΟΧΗΣ ΥΠΗΡΕΣΙΩΝ",
                            sign = "+"
                        },
                        new
                        {
                            Code = 175,
                            Description = "13 παρ. 1",
                            ShortTitle = "Α.ΕΠΙΣΤΡ",
                            Title = "ΑΠΟΔΕΙΞΗ ΕΠΙΣΤΡΟΦΗΣ",
                            sign = "-"
                        },
                        new
                        {
                            Code = 215,
                            Description = "Άρθρο 23 παρ. 5",
                            ShortTitle = "ΕΙΔ.ΑΚ.ΣΤ.",
                            Title = "ΕΙΔΙΚΟ ΑΚΥΡΩΤΙΚΟ ΣΤΟΙΧΕΙΟ",
                            sign = " "
                        });
                });

            modelBuilder.Entity("Domain.Model.MyDataPartyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MyDataDocEncounterInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MyDataDocIssuerInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocEncounterInvoiceId");

                    b.HasIndex("MyDataDocIssuerInvoiceId");

                    b.ToTable("MyDataPartyTypes");
                });

            modelBuilder.Entity("Domain.Model.MyDataPaymentMethodDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataDocInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("paymentMethodInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocInvoiceId");

                    b.ToTable("MyDataPaymentMethodDetails");
                });

            modelBuilder.Entity("Domain.Model.MyDataResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MyDataInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("authenticationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("index")
                        .HasColumnType("int");

                    b.Property<long?>("invoiceMark")
                        .HasColumnType("bigint");

                    b.Property<string>("invoiceUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("statusCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MyDataInvoiceId");

                    b.ToTable("MyDataResponses");
                });

            modelBuilder.Entity("Domain.Model.MyDataTaxes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MyDataDocInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("taxAmount")
                        .HasColumnType("float");

                    b.Property<int?>("taxCategory")
                        .HasColumnType("int");

                    b.Property<int?>("taxType")
                        .HasColumnType("int");

                    b.Property<double?>("taxunderlyingValueType")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MyDataDocInvoiceId");

                    b.ToTable("MyDataTaxes");
                });

            modelBuilder.Entity("Domain.Model.MyDataTransmittedDocInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authenticationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("mark")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MyDataTransmittedDocInvoices");
                });

            modelBuilder.Entity("Domain.Model.MyDataAddressType", b =>
                {
                    b.HasOne("Domain.Model.MyDataPartyType", "MyDataPartyType")
                        .WithOne("address")
                        .HasForeignKey("Domain.Model.MyDataAddressType", "MyDataPartyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataCancelationError", b =>
                {
                    b.HasOne("Domain.Model.MyDataCancelationResponse", "MyDataCancelationResponse")
                        .WithMany("Errors")
                        .HasForeignKey("MyDataCancelationResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataCancelationResponse", b =>
                {
                    b.HasOne("Domain.Model.MyDataInvoice", "MyDataInvoice")
                        .WithMany("MyDataCancelationResponses")
                        .HasForeignKey("MyDataInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataError", b =>
                {
                    b.HasOne("Domain.Model.MyDataResponse", "MyDataResponse")
                        .WithMany("Errors")
                        .HasForeignKey("MyDataResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataExpensesClassification", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocInvoice")
                        .WithMany()
                        .HasForeignKey("MyDataDocInvoiceId");
                });

            modelBuilder.Entity("Domain.Model.MyDataIncomeClassification", b =>
                {
                    b.HasOne("Domain.Model.MyDataInvoiceRowType", "MyDataInvoiceDocRowType")
                        .WithOne("incomeClassification")
                        .HasForeignKey("Domain.Model.MyDataIncomeClassification", "MyDataInvoiceDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.MyDataIncomeError", b =>
                {
                    b.HasOne("Domain.Model.MyDataIncomeResponse", "MyIncomeDataResponse")
                        .WithMany("Errors")
                        .HasForeignKey("MyDataIncomeResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataIncomeResponse", b =>
                {
                    b.HasOne("Domain.Model.MyDataIncome", "MyDataIncome")
                        .WithMany("MyDataIncomeResponses")
                        .HasForeignKey("MyDataIncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoice", b =>
                {
                    b.HasOne("Domain.Model.MyDataInvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceDetails", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocInvoice")
                        .WithMany()
                        .HasForeignKey("MyDataDocInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceExpensesClassificationType", b =>
                {
                    b.HasOne("Domain.Model.MyDataExpensesClassification", "expensesClassificationDetailData")
                        .WithMany()
                        .HasForeignKey("expensesClassificationDetailDataId");
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceHeaderType", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocInvoice")
                        .WithOne("invoiceHeaderType")
                        .HasForeignKey("Domain.Model.MyDataInvoiceHeaderType", "MyDataDocInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceRowType", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocInvoice")
                        .WithMany("invoiceDetails")
                        .HasForeignKey("MyDataDocInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.MyDataInvoiceSummary", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocInvoice")
                        .WithOne("invoiceSummary")
                        .HasForeignKey("Domain.Model.MyDataInvoiceSummary", "MyDataDocInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataPartyType", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocEncounterInvoice")
                        .WithMany("counterpart")
                        .HasForeignKey("MyDataDocEncounterInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocIssuerInvoice")
                        .WithMany("issuer")
                        .HasForeignKey("MyDataDocIssuerInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Domain.Model.MyDataPaymentMethodDetail", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocInvoice")
                        .WithMany("paymentMethodDetailType")
                        .HasForeignKey("MyDataDocInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataResponse", b =>
                {
                    b.HasOne("Domain.Model.MyDataInvoice", "MyDataInvoice")
                        .WithMany("MyDataResponses")
                        .HasForeignKey("MyDataInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.MyDataTaxes", b =>
                {
                    b.HasOne("Domain.Model.MyDataTransmittedDocInvoice", "MyDataDocInvoice")
                        .WithMany("taxesTotals")
                        .HasForeignKey("MyDataDocInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
